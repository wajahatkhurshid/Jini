<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.WindowsEventLog</name>
    </assembly>
    <members>
        <member name="T:NLog.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/EventLog-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="F:NLog.Targets.EventLogTarget.EventLogMaxMessageLength">
            <summary>
            Max size in characters (limitation of the EventLog API).
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
            <param name="appDomain"><see cref="T:NLog.Internal.Fakeables.IAppDomain"/>.<see cref="P:NLog.Internal.Fakeables.IAppDomain.FriendlyName"/> to be used as Source.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(NLog.Targets.EventLogTarget.IEventLogWrapper,NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MachineName">
            <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventId">
            <summary>
            Gets or sets the layout that renders event ID.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Category">
            <summary>
            Gets or sets the layout that renders event Category.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EntryType">
            <summary>
            Optional entry type. When not set, or when not convertible to <see cref="T:System.Diagnostics.EventLogEntryType"/> then determined by <see cref="T:NLog.LogLevel"/>
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Source">
            <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Log">
            <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or any user-defined name.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MaxMessageLength">
            <summary>
            Gets or sets the message length limit to write to the Event Log.
            </summary>
            <remarks><value>MaxMessageLength</value> cannot be zero or negative</remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MaxKilobytes">
            <summary>
            Gets or sets the maximum Event log size in kilobytes.
            </summary>
            <remarks>
            <value>MaxKilobytes</value> cannot be less than 64 or greater than 4194240 or not a multiple of 64.
            If <c>null</c>, the value will not be specified while creating the Event log.
            </remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.OnOverflow">
            <summary>
            Gets or sets the action to take if the message is larger than the <see cref="P:NLog.Targets.EventLogTarget.MaxMessageLength"/> option.
            </summary>
            <docgen category='Event Log Overflow Action' order='10' />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetEntryType(NLog.LogEventInfo)">
            <summary>
            Get the entry type for logging the message.
            </summary>
            <param name="logEvent">The logging event - for rendering the <see cref="P:NLog.Targets.EventLogTarget.EntryType"/></param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetFixedSource">
            <summary>
            Get the source, if and only if the source is fixed.
            </summary>
            <returns><c>null</c> when not <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/></returns>
            <remarks>Internal for unit tests</remarks>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.CreateEventSourceIfNeeded(System.String,System.Boolean)">
            <summary>
            (re-)create an event source, if it isn't there. Works only with fixed source names.
            </summary>
            <param name="fixedSource">The source name. If source is not fixed (see <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/>, then pass <c>null</c> or <see cref="F:System.String.Empty"/>.</param>
            <param name="alwaysThrowError">always throw an Exception when there is an error</param>
        </member>
        <member name="T:NLog.Targets.EventLogTarget.IEventLogWrapper">
            <summary>
            A wrapper for Windows event log.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.IEventLogWrapper.Source">
            <summary>
            A wrapper for the property <see cref="P:System.Diagnostics.EventLog.Source"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.IEventLogWrapper.Log">
            <summary>
            A wrapper for the property <see cref="P:System.Diagnostics.EventLog.Log"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.IEventLogWrapper.MachineName">
            <summary>
            A wrapper for the property <see cref="P:System.Diagnostics.EventLog.MachineName"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.IEventLogWrapper.MaximumKilobytes">
            <summary>
            A wrapper for the property <see cref="P:System.Diagnostics.EventLog.MaximumKilobytes"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.IEventLogWrapper.IsEventLogAssociated">
            <summary>
            Indicates whether an event log instance is associated.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            A wrapper for the method <see cref="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.AssociateNewEventLog(System.String,System.String,System.String)">
            <summary>
            Creates a new association with an instance of the event log.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.DeleteEventSource(System.String,System.String)">
            <summary>
            A wrapper for the static method <see cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.SourceExists(System.String,System.String)">
            <summary>
            A wrapper for the static method <see cref="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.LogNameFromSourceName(System.String,System.String)">
            <summary>
            A wrapper for the static method <see cref="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IEventLogWrapper.CreateEventSource(System.Diagnostics.EventSourceCreationData)">
            <summary>
            A wrapper for the static method <see cref="M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)"/>.
            </summary>
        </member>
        <member name="T:NLog.Targets.EventLogTarget.EventLogWrapper">
            <summary>
            The implementation of <see cref="T:NLog.Targets.EventLogTarget.IEventLogWrapper"/>, that uses Windows <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventLogWrapper.Source">
            <inheritdoc />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventLogWrapper.Log">
            <inheritdoc />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventLogWrapper.MachineName">
            <inheritdoc />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventLogWrapper.MaximumKilobytes">
            <inheritdoc />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventLogWrapper.IsEventLogAssociated">
            <inheritdoc />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.AssociateNewEventLog(System.String,System.String,System.String)">
            <inheritdoc />
            <summary>
            Creates a new association with an instance of Windows <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.DeleteEventSource(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.SourceExists(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.LogNameFromSourceName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.EventLogWrapper.CreateEventSource(System.Diagnostics.EventSourceCreationData)">
            <inheritdoc />
        </member>
        <member name="T:NLog.Targets.EventLogTargetOverflowAction">
            <summary>
            Action that should be taken if the message is greater than
            the max message size allowed by the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Truncate">
            <summary>
            Truncate the message before writing to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Split">
            <summary>
            Split the message and write multiple entries to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Discard">
            <summary>
            Discard of the message. It will not be written to the Event Log.
            </summary>
        </member>
    </members>
</doc>
